package models.analysis

import models.analysis.SampleStatuses.SampleStatus
import no.uio.musit.models.{ActorId, MuseumId, ObjectUUID}
import org.joda.time.DateTime
import play.api.libs.json.{Format, Json, Reads}

case class SampleObject(
    objectId: Option[ObjectUUID],
    parentObjectId: Option[ObjectUUID],
    isCollectionObject: Boolean,
    museumId: MuseumId,
    status: SampleStatus,
    responsible: Option[ActorId],
    createdDate: Option[DateTime],
    // TODO: Add auto generated sample ID
    sampleId: Option[String],
    externalId: Option[String],
    sampleType: Option[String],
    sampleSubType: Option[String],
    size: Option[Double],
    sizeUnit: Option[String],
    container: Option[String],
    storageMedium: Option[String],
    note: Option[String],
    registeredBy: Option[ActorId],
    registeredDate: Option[DateTime],
    updatedBy: Option[ActorId],
    updatedDate: Option[DateTime]
)

object SampleObject {

  implicit val format: Format[SampleObject] = Json.format[SampleObject]

}

case class SaveSampleObject(
    parentObjectId: Option[ObjectUUID],
    isCollectionObject: Boolean,
    museumId: MuseumId,
    status: SampleStatus,
    responsible: Option[ActorId],
    createdDate: Option[DateTime],
    // TODO: Add autogenerated sample ID
    sampleId: Option[String],
    externalId: Option[String],
    sampleType: Option[String],
    sampleSubType: Option[String],
    size: Option[Double],
    sizeUnit: Option[String],
    container: Option[String],
    storageMedium: Option[String],
    note: Option[String]
) {

  def asSampleObject: SampleObject =
    SampleObject(
      objectId = None,
      parentObjectId = parentObjectId,
      isCollectionObject = isCollectionObject,
      museumId = museumId,
      status = status,
      responsible = responsible,
      createdDate = createdDate,
      sampleId = sampleId,
      externalId = externalId,
      sampleType = sampleType,
      sampleSubType = sampleSubType,
      size = size,
      sizeUnit = sizeUnit,
      container = container,
      storageMedium = storageMedium,
      note = note,
      registeredBy = None,
      registeredDate = None,
      updatedBy = None,
      updatedDate = None
    )

}

object SaveSampleObject {

  implicit val reads: Reads[SaveSampleObject] = Json.reads[SaveSampleObject]

}
