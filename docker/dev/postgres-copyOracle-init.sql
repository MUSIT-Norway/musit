CREATE USER musit PASSWORD 'musit';
grant all privileges on database postgres to musit;


CREATE SCHEMA musark_auth AUTHORIZATION musit;
CREATE SCHEMA musark_core AUTHORIZATION musit;
CREATE SCHEMA musark_storage AUTHORIZATION musit;
CREATE SCHEMA musark_actor AUTHORIZATION musit;
CREATE SCHEMA musark_analysis AUTHORIZATION musit;
CREATE SCHEMA musark_loan AUTHORIZATION musit;
CREATE SCHEMA musit_mapping AUTHORIZATION musit;
CREATE SCHEMA musark_conservation AUTHORIZATION musit;
CREATE SCHEMA musark_thing AUTHORIZATION musit;

-- Create Auth tables
CREATE TABLE MUSARK_AUTH.AUTH_GROUP (
  group_uuid        UUID NOT NULL,
  group_name        TEXT NOT NULL,
  group_module      INTEGER      NOT NULL,
  group_permission  INTEGER      NOT NULL,
  group_museumId    INTEGER      NOT NULL,
  group_description TEXT,
  PRIMARY KEY (group_uuid),
  CONSTRAINT unique_group_name UNIQUE (group_name)
);

CREATE TABLE MUSARK_AUTH.MUSEUM_COLLECTION (
  collection_uuid               UUID NOT NULL,
  collection_name               TEXT,
  collection_schema_identifiers TEXT NOT NULL,
  PRIMARY KEY (collection_uuid),
  CONSTRAINT unique_mcol_name UNIQUE (collection_name)
);

CREATE TABLE MUSARK_AUTH.USER_AUTH_GROUP (
  uag_id           INTEGER GENERATED BY DEFAULT AS IDENTITY,
  user_feide_email TEXT NOT NULL,
  group_uuid       UUID NOT NULL,
  collection_uuid  UUID,
  PRIMARY KEY (uag_id),
  FOREIGN KEY (group_uuid) REFERENCES MUSARK_AUTH.AUTH_GROUP (group_uuid),
  FOREIGN KEY (collection_uuid) REFERENCES MUSARK_AUTH.MUSEUM_COLLECTION (collection_uuid)
);

CREATE TABLE MUSARK_AUTH.USER_INFO (
  user_uuid    UUID NOT NULL,
  secondary_id TEXT,
  name         TEXT,
  email        TEXT,
  picture      TEXT,
  PRIMARY KEY (user_uuid)
);

-- Table for keeping tabs on a users authenticated activity. "user_uuid" is not
-- set as a foreign key deliberately. This allows us to prepare the session with
-- a unique ID before we've received the access token from Dataporten.
CREATE TABLE MUSARK_AUTH.USER_SESSION (
  session_uuid     UUID      NOT NULL,
  token            TEXT,
  user_uuid        UUID,
  login_time       TIMESTAMP WITH TIME ZONE,
  last_active      TIMESTAMP WITH TIME ZONE,
  is_logged_in     INTEGER DEFAULT 0 NOT NULL,
  token_expires_in BIGINT,
  client           TEXT,
  PRIMARY KEY (session_uuid)
);

-- Core tables
CREATE TABLE MUSARK_CORE.ES_INDEX_STATUS (
  index_alias   TEXT            NOT NULL,
  index_created TIMESTAMP WITH TIME ZONE NOT NULL,
  index_updated TIMESTAMP WITH TIME ZONE,
  PRIMARY KEY (index_alias)
);

-- Actor tables
CREATE TABLE MUSIT_MAPPING.ACTOR (
  actorid             INTEGER GENERATED BY DEFAULT AS IDENTITY,
  actorname           TEXT,
  dataporten_uuid     UUID,
  dataporten_username TEXT,
  old_username        TEXT,
  lokal_pk            INTEGER,
  tabellid            INTEGER,
  old_schemaname      TEXT,
  museum_id           INTEGER,
  application_uuid    UUID,
  PRIMARY KEY (actorid)
);

CREATE TABLE MUSARK_ACTOR.ORGANISATION (
  org_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  full_name TEXT NOT NULL,
  tel TEXT,
  web TEXT,
  synonyms TEXT,
  service_tags TEXT,
  contact TEXT,
  email TEXT,
  PRIMARY KEY (org_id)
);

CREATE TABLE MUSARK_ACTOR.ORGANISATION_ADDRESS (
  orgaddressid INTEGER GENERATED BY DEFAULT AS IDENTITY,
  org_id INTEGER NOT NULL,
  street_address TEXT,
  street_address_2 TEXT,
  postal_code_place TEXT,
  country_name TEXT,
  PRIMARY KEY (orgaddressid),
  FOREIGN KEY (org_id) REFERENCES MUSARK_ACTOR.ORGANISATION(org_id)
);


-- storage facility tables
CREATE TABLE MUSARK_STORAGE.STORAGE_NODE (
  storage_node_id   INTEGER GENERATED BY DEFAULT AS IDENTITY,
  storage_node_uuid UUID, -- FIXME: This field should definitely be NOT NULL
  storage_node_name TEXT,
  area              FLOAT8,
  area_to           FLOAT8,
  is_storage_unit   BOOLEAN   DEFAULT '1',
  is_part_of        INTEGER,
  height            FLOAT8,
  height_to         FLOAT8,
  node_path         TEXT            NOT NULL,
  is_deleted        BOOLEAN DEFAULT 0        NOT NULL,
  storage_type      TEXT DEFAULT 'StorageUnit',
  group_read        TEXT,
  group_write       TEXT,
  old_barcode       BIGINT,
  museum_id         INTEGER                  NOT NULL,
  updated_by        TEXT             NOT NULL,
  updated_date      TIMESTAMP WITH TIME ZONE NOT NULL,
  PRIMARY KEY (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.ROOM (
  storage_node_id               INTEGER NOT NULL,
  perimeter_security            INTEGER,
  theft_protection              INTEGER,
  fire_protection               INTEGER,
  water_damage_assessment       INTEGER,
  routines_and_contingency_plan INTEGER,
  relative_humidity             INTEGER,
  temperature_assessment        INTEGER,
  lighting_condition            INTEGER,
  preventive_conservation       INTEGER,
  PRIMARY KEY (storage_node_id),
  FOREIGN KEY (storage_node_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.BUILDING (
  storage_node_id INTEGER NOT NULL,
  postal_address  TEXT,
  PRIMARY KEY (storage_node_id),
  FOREIGN KEY (storage_node_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.ORGANISATION (
  storage_node_id INTEGER NOT NULL,
  postal_address  TEXT,
  org_as_actor_id INTEGER,
  org_as_actor_uuid UUID,
  PRIMARY KEY (storage_node_id),
  FOREIGN KEY (storage_node_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

-- ===========================================================================
-- The NEW StorageFacility event tables
-- ===========================================================================
CREATE SEQUENCE MUSARK_STORAGE.nevent_sequence
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_STORAGE.NEW_EVENT (
  event_id        BIGINT DEFAULT MUSARK_STORAGE.nevent_sequence.nextval,
  type_id         INTEGER             NOT NULL,
  museum_id       INTEGER                  NOT NULL,
  done_by         TEXT,
  done_date       TIMESTAMP WITH TIME ZONE,
  updated_date    TIMESTAMP WITH TIME ZONE,
  registered_by   TEXT             NOT NULL,
  registered_date TIMESTAMP WITH TIME ZONE NOT NULL,
  part_of         BIGINT,
  affected_uuid   UUID,
  affected_type   TEXT, -- collection | sample | node | ...
  note            TEXT,
  event_json      TEXT,
  PRIMARY KEY (event_id),
  CONSTRAINT ensure_storage_event_json CHECK (event_json IS JSON)
);

CREATE TABLE MUSARK_STORAGE.NEW_LOCAL_OBJECT (
  object_uuid         UUID NOT NULL,
  latest_move_id      BIGINT  NOT NULL,
  current_location_id UUID NOT NULL,
  museum_id           INTEGER      NOT NULL,
  object_type         TEXT DEFAULT 'collection', -- possible values can be 'collection', or 'sample'
  PRIMARY KEY (object_uuid),
  FOREIGN KEY (latest_move_id) REFERENCES MUSARK_STORAGE.NEW_EVENT (event_id)
);

CREATE TABLE MUSARK_STORAGE.EVENT_TYPE (
  event_type_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  name          TEXT NOT NULL,
  PRIMARY KEY (event_type_ID)
);

-- ===========================================================================
-- Temporary mapping table for museum objects.
-- ===========================================================================

-- Object table
CREATE TABLE MUSIT_MAPPING.MUSITTHING (
  object_id         BIGINT GENERATED BY DEFAULT AS IDENTITY,
  museumNo          TEXT      NOT NULL,
  subNo             TEXT,
  term              TEXT      NOT NULL,
  museumId          INTEGER           NOT NULL,
  museumNoAsNumber  INTEGER,
  subNoAsNumber     INTEGER,
  mainobject_id     BIGINT,
  is_deleted        BOOLEAN DEFAULT 0 NOT NULL,
  old_schemaname    TEXT,
  lokal_pk          BIGINT,
  old_barcode       BIGINT,
  new_collection_id INTEGER,
  musitthing_uuid   UUID,
  updated_date      TIMESTAMP NOT NULL,
  ark_form          TEXT,
  ark_funn_nr       TEXT,
  nat_stage         TEXT,
  nat_gender        TEXT,
  nat_legdato       TEXT,
  num_denotation    TEXT,
  num_valor         TEXT,
  num_date          TEXT,
  num_weight        TEXT,
  aggregated_class_data TEXT,
  PRIMARY KEY (object_id)
);


-- ===========================================================================
-- Temporary mapping table for museum object's material.
-- ===========================================================================

CREATE TABLE MUSIT_MAPPING.THING_MATERIAL
(
  collectionid         INTEGER,
  objectid             BIGINT,
  etn_materialtype     TEXT,
  etn_material         TEXT,
  etn_material_element TEXT,
  etn_matrid_local     INTEGER,
  ark_material         TEXT,
  ark_spes_material    TEXT,
  ark_sortering        INTEGER,
  ark_hid_local        INTEGER,
  num_material         TEXT,
  num_numistypeid      INTEGER
);

-- ===========================================================================
-- Temporary mapping table for museum object's location.
-- ===========================================================================
create table MUSIT_MAPPING.THING_LOCATION
(
  collectionid       INTEGER,
  objectid           BIGINT,
  ark_gardsnavn      TEXT,
  ark_gardsnr        INTEGER,
  ark_bruksnr        TEXT,

  ark_stedid         INTEGER,
  nat_country        TEXT,
  nat_state_province TEXT,
  nat_municipality   TEXT,
  nat_locality       TEXT,
  nat_coordinate     TEXT,
  nat_coord_datum    TEXT,
  nat_sone_band      TEXT,
  etn_place          TEXT,
  etn_country        TEXT,
  etn_region1        TEXT,
  etn_region2        TEXT,
  etn_area           TEXT,
  etn_local_stedid   INTEGER,
  etn_place_count    INTEGER
);

-- ===========================================================================
-- Temporary mapping table for museum object's coordinate.
-- ===========================================================================
CREATE TABLE MUSIT_MAPPING.THING_COORDINATE
(
  collectionid       INTEGER,
  objectid           BIGINT,
  ark_projeksjon     TEXT,
  ark_presisjon      TEXT,
  ark_nord           TEXT,
  ark_ost            TEXT,
  ark_localksettid   INTEGER
);

-- ===========================================================================
-- Temporary mapping table for museum object's coordinate.
-- ===========================================================================

CREATE TABLE MUSARK_THING.MUSITTHING_SEARCH
(
  objectuuid            UUID not null,
  museumno              TEXT,
  subno                 TEXT,
  term                  TEXT,
  mainobject_id         BIGINT,
  new_collection_id     INTEGER,
  ark_form              TEXT,
  ark_funn_nr           TEXT,
  nat_stage             TEXT,
  nat_gender            TEXT,
  nat_legdato           TEXT,
  is_deleted            BOOLEAN default 0,
  aggregated_class_data TEXT,
  updated_date          TIMESTAMP(6) not null,
  museumno_prefix       TEXT,
  museumno_number       INTEGER,
  subno_number          INTEGER,
  document_json         TEXT,
  museumid              INTEGER,
   PRIMARY KEY (objectuuid)
);


-- ===========================================================================
-- Tables for Analysis and SampleObject management
-- ===========================================================================
CREATE SEQUENCE MUSARK_ANALYSIS.sample_object_sample_num_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_ANALYSIS.SAMPLE_OBJECT (
  sample_uuid            UUID             NOT NULL,
  parent_object_uuid     UUID,
  parent_object_type     TEXT,
  is_extracted           BOOLEAN DEFAULT 0        NOT NULL,
  museum_id              INTEGER                  NOT NULL,
  status                 INTEGER DEFAULT 1        NOT NULL,
  responsible_actor      TEXT,
  done_by                UUID,
  done_date              TIMESTAMP WITH TIME ZONE,
  sample_id              TEXT,
  sample_num             INTEGER DEFAULT MUSARK_ANALYSIS.sample_object_sample_num_seq.nextval,
  external_id            TEXT,
  external_id_source     TEXT,
  sample_type_id         INTEGER                  NOT NULL,
  sample_size            FLOAT8,
  sample_size_unit       TEXT,
  sample_container       TEXT,
  storage_medium         TEXT,
  treatment              TEXT,
  leftover_sample        INTEGER DEFAULT 1        NOT NULL,
  description            TEXT,
  note                   TEXT,
  originated_object_uuid UUID             NOT NULL,
  registered_by          UUID             NOT NULL,
  registered_date        TIMESTAMP WITH TIME ZONE NOT NULL,
  updated_by             UUID,
  updated_date           TIMESTAMP WITH TIME ZONE,
  is_deleted             BOOLEAN DEFAULT 0        NOT NULL,
  PRIMARY KEY (sample_uuid)
);


CREATE TABLE MUSARK_ANALYSIS.SAMPLE_TYPE (
  sampletype_id    INTEGER GENERATED BY DEFAULT AS IDENTITY,
  no_sampletype    TEXT NOT NULL,
  en_sampletype    TEXT NOT NULL,
  no_samplesubtype TEXT,
  en_samplesubtype TEXT,
  PRIMARY KEY (sampletype_id)
);

CREATE SEQUENCE MUSARK_ANALYSIS.event_type_type_id_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_ANALYSIS.EVENT_TYPE (
  type_id     INTEGER DEFAULT MUSARK_ANALYSIS.event_type_type_id_seq.nextval,
  category                     INTEGER       NOT NULL,
  no_name                      TEXT NOT NULL,
  en_name                      TEXT NOT NULL,
  short_name                   TEXT,
  collections                  TEXT, -- if empty then all collections, else value is ',uuid_1,uuid_2,uuid_9,'     LIKE '%,uuid_2,%'
  extra_description_type       TEXT,
  extra_description_attributes TEXT,
  extra_result_type            TEXT,
  extra_result_attributes      TEXT,
  PRIMARY KEY (type_id)
);

CREATE TABLE MUSARK_ANALYSIS.EVENT (
  event_id        BIGINT GENERATED BY DEFAULT AS IDENTITY,
  type_id         INTEGER                  NOT NULL,
  museum_id       INTEGER                  NOT NULL,
  done_by         UUID,
  done_date       TIMESTAMP WITH TIME ZONE,
  updated_date    TIMESTAMP WITH TIME ZONE,
  registered_by   UUID             NOT NULL,
  registered_date TIMESTAMP WITH TIME ZONE NOT NULL,
  part_of         BIGINT,
  affected_uuid   UUID,
  note            TEXT,
  status          INTEGER,
  case_numbers    TEXT,
  event_json      TEXT,
  PRIMARY KEY (event_id),
  CONSTRAINT ensure_event_json CHECK (event_json IS JSON)
);

CREATE TABLE MUSARK_ANALYSIS.RESULT (
  event_id        BIGINT               NOT NULL,
  museum_id       INTEGER                  NOT NULL,
  registered_by   UUID             NOT NULL,
  registered_date TIMESTAMP WITH TIME ZONE NOT NULL,
  result_json     TEXT,
  PRIMARY KEY (event_id),
  FOREIGN KEY (event_id) REFERENCES MUSARK_ANALYSIS.EVENT (event_id),
  CONSTRAINT ensure_result_json CHECK (result_json IS JSON)
);

CREATE TABLE MUSARK_ANALYSIS.TREATMENT (
  treatment_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  no_treatment TEXT NOT NULL,
  en_treatment TEXT NOT NULL,
  PRIMARY KEY (treatment_id)
);


CREATE TABLE MUSARK_ANALYSIS.STORAGEMEDIUM (
  storagemedium_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  no_storagemedium TEXT NOT NULL,
  en_storagemedium TEXT NOT NULL,
  PRIMARY KEY (storagemedium_id)
);

CREATE TABLE MUSARK_ANALYSIS.STORAGECONTAINER (
  storagecontainer_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  no_storagecontainer TEXT NOT NULL,
  en_storagecontainer TEXT NOT NULL,
  PRIMARY KEY (storagecontainer_id)
);


CREATE TABLE MUSARK_LOAN.LOAN_EVENT (
  event_id        BIGINT GENERATED BY DEFAULT AS IDENTITY,
  type_id         INTEGER                  NOT NULL,
  event_date      TIMESTAMP WITH TIME ZONE NOT NULL,
  registered_by   UUID             NOT NULL,
  registered_date TIMESTAMP WITH TIME ZONE NOT NULL,
  museum_id       INTEGER                  NOT NULL,
  part_of         BIGINT,
  object_uuid     UUID,
  case_numbers    TEXT,
  note            TEXT,
  event_json      TEXT,
  PRIMARY KEY (event_id),
  CONSTRAINT ensure_event_json CHECK (event_json IS JSON)
);

CREATE TABLE MUSARK_LOAN.ACTIVE_LOAN (
  active_loan_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  museum_id      INTEGER                  NOT NULL,
  object_uuid    UUID             NOT NULL UNIQUE,
  event_id       BIGINT               NOT NULL,
  return_date    TIMESTAMP WITH TIME ZONE NOT NULL,
  PRIMARY KEY (active_loan_id)
);

CREATE TABLE MUSARK_LOAN.LENT_OBJECT (
  lent_object_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  event_id       BIGINT   NOT NULL,
  object_uuid    UUID NOT NULL,
  PRIMARY KEY (lent_object_id)
);


CREATE SEQUENCE MUSARK_CONSERVATION.event_eventid_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;



CREATE TABLE MUSARK_CONSERVATION.EVENT (
  event_id        BIGINT DEFAULT MUSARK_CONSERVATION.event_eventid_seq.nextval,
  type_id         INTEGER                  NOT NULL,
  museum_id       INTEGER                  NOT NULL,
  updated_by      UUID,
  updated_date    TIMESTAMP WITH TIME ZONE,
  registered_by   UUID             NOT NULL,
  registered_date TIMESTAMP WITH TIME ZONE NOT NULL,
  part_of         BIGINT,
  affected_uuid   UUID,
  note            TEXT,
  case_number     TEXT,
  event_json      TEXT,
  is_deleted      BOOLEAN DEFAULT 0 NOT NULL,
  PRIMARY KEY (event_id),
  CONSTRAINT ensure_event_json CHECK (event_json IS JSON)
  );


CREATE SEQUENCE MUSARK_CONSERVATION.event_type_typeid_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_CONSERVATION.EVENT_TYPE (
  type_id     INTEGER DEFAULT MUSARK_CONSERVATION.event_type_typeid_seq.nextval,
  no_name                      TEXT NOT NULL,
  en_name                      TEXT NOT NULL,
  collections                  TEXT, -- if empty then all collections, else value is ',uuid_1,uuid_2,uuid_9,'     LIKE '%,uuid_2,%'
  extra_description_type       TEXT,
  extra_description_attributes TEXT,
  PRIMARY KEY (type_id)
);


CREATE TABLE MUSARK_CONSERVATION.OBJECT_EVENT(
object_uuid UUID NOT NULL,
event_id BIGINT NOT NULL,
PRIMARY KEY (object_uuid,event_id)
);


CREATE SEQUENCE MUSARK_CONSERVATION.ROLE_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_CONSERVATION.ROLE(
role_id INTEGER DEFAULT MUSARK_CONSERVATION.ROLE_SEQ.NEXTVAL,
no_role TEXT,
en_role TEXT,
role_for TEXT, -- om det er rollen hendelse_aktør eller hendelse_gjenstand
PRIMARY KEY (role_id)
);

CREATE TABLE MUSARK_CONSERVATION.EVENT_ACTOR_ROLE_DATE(
event_id  BIGINT NOT NULL,
actor_id UUID NOT NULL,
role_id INTEGER NOT NULL,
actor_role_date DATE,
PRIMARY KEY (event_id,actor_id,role_id)
--CONSTRAINT FK_ARD_EVENTID FOREIGN KEY (event_id) references MUSARK_CONSERVERING.EVENT(event_id),
--CONSTRAINT FK_ARD_ROLEID FOREIGN KEY (role_id) references MUSARK_CONSERVERING.ROLE(role_id)
);

CREATE SEQUENCE MUSARK_CONSERVATION.treatment_material_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_CONSERVATION.TREATMENT_MATERIAL(
material_id INTEGER DEFAULT MUSARK_CONSERVATION.treatment_material_seq.nextval,
no_material TEXT,
en_material TEXT,
PRIMARY KEY (material_id)
);

CREATE SEQUENCE MUSARK_CONSERVATION.treatment_keyword_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_CONSERVATION.TREATMENT_KEYWORD(
keyword_id INTEGER DEFAULT MUSARK_CONSERVATION.treatment_keyword_seq.nextval,
no_keyword TEXT,
en_keyword TEXT,
PRIMARY KEY (keyword_id)
);


CREATE TABLE MUSARK_CONSERVATION.CONDITION_CODE(
condition_code INTEGER NOT NULL,
no_condition TEXT,
en_condition TEXT,
PRIMARY KEY (condition_code)
);


CREATE TABLE MUSARK_CONSERVATION.EVENT_DOCUMENT(
event_id  BIGINT NOT NULL,
file_id UUID NOT NULL,
PRIMARY KEY (event_id,file_id)
);


CREATE SEQUENCE MUSARK_CONSERVATION.MATERIAL_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE MUSARK_CONSERVATION.MATERIAL_COLLECTION
(
 MATERIAL_ID   INTEGER  DEFAULT MUSARK_CONSERVATION.MATERIAL_SEQ.NEXTVAL,
 collection_id INTEGER,
 old_matrid    INTEGER,
 PRIMARY KEY(MATERIAL_ID)
);

CREATE TABLE MUSARK_CONSERVATION.MATERIAL_ARCHAEOLOGY
(
 material_id INTEGER NOT NULL,
 no_material TEXT,
 en_material TEXT,
 hidden BOOLEAN DEFAULT 0 NOT NULL,
 PRIMARY KEY(MATERIAL_ID),
 FOREIGN KEY (MATERIAL_ID) REFERENCES MUSARK_CONSERVATION.MATERIAL_COLLECTION (MATERIAL_ID)
);

CREATE TABLE MUSARK_CONSERVATION.MATERIAL_NUMISMATIC
(
 material_id INTEGER NOT NULL,
 no_material TEXT,
 en_material TEXT,
 hidden BOOLEAN DEFAULT 0 NOT NULL,
 PRIMARY KEY(MATERIAL_ID),
 FOREIGN KEY (MATERIAL_ID) REFERENCES MUSARK_CONSERVATION.MATERIAL_COLLECTION (MATERIAL_ID)
);

CREATE TABLE MUSARK_CONSERVATION.MATERIAL_ETHNOGRAPHY
(
 material_id         INTEGER NOT NULL,
 no_material         TEXT,
 no_material_type    TEXT,
 no_material_element TEXT,
 en_material         TEXT,
 en_material_type    TEXT,
 en_material_element TEXT,
 fr_material         TEXT,
 fr_material_type    TEXT,
 superior_level      TEXT,
 hidden BOOLEAN DEFAULT 0 NOT NULL,
 PRIMARY KEY(MATERIAL_ID),
 FOREIGN KEY (MATERIAL_ID) REFERENCES MUSARK_CONSERVATION.MATERIAL_COLLECTION (MATERIAL_ID)
);


CREATE TABLE MUSARK_CONSERVATION.EA_EVENT_MATERIAL
(
 event_id      BIGINT NOT NULL,
 material_id    INTEGER NOT NULL,
 material_extra TEXT,
 sorting        INTEGER,
 PRIMARY KEY(EVENT_ID,MATERIAL_ID),
 FOREIGN KEY (MATERIAL_ID) REFERENCES MUSARK_CONSERVATION.MATERIAL_COLLECTION (MATERIAL_ID),
 FOREIGN KEY (EVENT_ID) REFERENCES MUSARK_CONSERVATION.EVENT(EVENT_ID)
);

-- Grant all rights on tables to musit user
BEGIN
  FOR x IN (SELECT owner || '.' || table_name ownertab
            FROM all_tables
            WHERE owner LIKE 'MUSARK_%' OR owner = 'MUSIT_MAPPING')
  LOOP
    EXECUTE IMMEDIATE 'GRANT ALL ON ' || x.ownertab || ' TO MUSIT';
  END LOOP;
END;
