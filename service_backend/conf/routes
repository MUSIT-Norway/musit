# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# General endpoints
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GET           /buildinfo                                       controllers.Application.buildInfo
GET           /healthcheck                                     controllers.HealthCheckController.healthCheck

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Actor module
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GET           /dataporten/currentUser                                        controllers.actor.UserController.currentUser

## Mapping routes, TODO: Remove these endpoints when database is migrated.
GET           /person                                                        controllers.actor.PersonController.search(museumId: Int, search: Option[no.uio.musit.service.MusitSearch])
POST          /person/details                                                controllers.actor.PersonController.details
GET           /person/:id                                                    controllers.actor.PersonController.get(id: String)

## Organization routes, the new actor
GET           /organisation                                                  controllers.actor.OrganisationController.search(museumId: Int, search: Option[no.uio.musit.service.MusitSearch])
POST          /organisation                                                  controllers.actor.OrganisationController.add
GET           /organisation/labs                                             controllers.actor.OrganisationController.getAnalysisLabList
GET           /organisation/:orgId                                           controllers.actor.OrganisationController.get(orgId: Long)
PUT           /organisation/:orgId                                           controllers.actor.OrganisationController.update(orgId: Long)
DELETE        /organisation/:orgId                                           controllers.actor.OrganisationController.delete(orgId: Long)

## OrganizationAddress routes, the new actor
GET           /organisation/:orgId/address                                   controllers.actor.OrganisationAddressController.listForOrg(orgId: Long)
POST          /organisation/:orgId/address                                   controllers.actor.OrganisationAddressController.add(orgId: Long)
GET           /organisation/:orgId/address/:id                               controllers.actor.OrganisationAddressController.get(orgId: Long, id: Long)
PUT           /organisation/:orgId/address/:id                               controllers.actor.OrganisationAddressController.update(orgId: Long, id: Long)
DELETE        /organisation/:orgId/address/:id                               controllers.actor.OrganisationAddressController.delete(orgId: Long, id: Long)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Object search, searching against cached object tables in the database (not using ES)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GET           /museum/:mid/objects/searchDb                                    controllers.musitsearchobject.SearchObjectController.search(mid: Int, collectionIds: String, from: Int ?=0, limit: Int ?=25, museumNo: Option[String] ?= None, museumNoAsANumber: Option[String] ?= None, subNo: Option[String] ?= None, term: Option[String] ?= None, q: Option[String] ?= None, ignoreSamples:Boolean ?=false)

POST           /admin/reindex/searchDb                                    controllers.musitsearchobject.SearchObjectController.reindexSearchDb()


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Object services
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Routes that require access to both objects and nodes
# ~~~~
GET           /museum/:mid/node/:nodeId/objects                              controllers.musitobject.ObjectController.getObjects(mid: Int, nodeId: String, collectionIds: String, page: Int ?=1, limit: Int ?=25)
GET           /museum/:mid/objects/:mainObjectId/children                    controllers.musitobject.ObjectController.findMainObjectChildren(mid: Int, mainObjectId: String, collectionIds: String)
GET           /museum/:mid/objects/search                                    controllers.musitobject.ObjectController.search(mid: Int, collectionIds: String, from: Int ?=0, limit: Int ?=25, museumNo: Option[String] ?= None,  museumNoAsANumber: Option[String] ?= None,subNo: Option[String] ?= None, term: Option[String] ?= None, q: Option[String] ?= None,ignoreSamples:Boolean ?=false)
GET           /museum/:mid/objects/:objectUUID                               controllers.musitobject.ObjectController.findObjectByUUID(mid: Int, objectUUID: String, collectionIds: String)



# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Delphi bridge services. Only to be used by the Delphi clients.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUT           /delphi/objects/tranlsate_old_ids                              controllers.delphi.DelphiBridgeController.translateOldObjectIds
GET           /delphi/museum/:mid/nodes/external                             controllers.delphi.DelphiBridgeController.outsideNodes(mid: Int)
GET           /delphi/objects/:oldObjectId                                   controllers.delphi.DelphiBridgeController.currentNode(oldObjectId: Long, schemaName: String)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Bar code services
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GET           /museum/:mid/scan                                              controllers.musitobject.ObjectController.scanForOldBarcode(mid: Int, oldBarcode: Long, collectionIds: String)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# StorageFacility module
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# StorageNode endpoints
POST          /museum/:mid/storagenodes                                      controllers.storage.StorageController.add(mid: Int)
POST          /museum/:mid/storagenodes/root                                 controllers.storage.StorageController.addRoot(mid: Int)
GET           /museum/:mid/storagenodes/root                                 controllers.storage.StorageController.root(mid: Int)

PUT           /museum/:mid/storagenodes/moveNode                             controllers.storage.StorageController.moveNode(mid: Int)
PUT           /museum/:mid/storagenodes/moveObject                           controllers.storage.StorageController.moveObject(mid: Int)

GET           /museum/:mid/storagenodes/search                               controllers.storage.StorageController.search(mid: Int, searchStr: Option[String], page: Int ?= 1, limit: Int ?=25)
GET           /museum/:mid/storagenodes/scan                                 controllers.storage.StorageController.scan(mid: Int, storageNodeId: Option[String] ?= None, oldBarcode: Option[Long] ?= None)

GET           /museum/:mid/storagenodes/report                               controllers.reporting.KdReportController.getReport(mid: Int)

GET           /museum/:mid/storagenodes/:nodeId                              controllers.storage.StorageController.getById(mid: Int, nodeId: String)
PUT           /museum/:mid/storagenodes/:nodeId                              controllers.storage.StorageController.update(mid: Int, nodeId: String)
DELETE        /museum/:mid/storagenodes/:nodeId                              controllers.storage.StorageController.delete(mid: Int, nodeId: String)
GET           /museum/:mid/storagenodes/:nodeId/children                     controllers.storage.StorageController.children(mid: Int, nodeId: String, page: Int ?= 1, limit: Int ?=25)
GET           /museum/:mid/storagenodes/:nodeId/events                       controllers.storage.EventController.listEventsForNode(mid: Int, nodeId: String)
GET           /museum/:mid/storagenodes/:nodeId/stats                        controllers.reporting.StatsController.stats(mid: Int, nodeId: String)

# Controls
POST          /museum/:mid/storagenodes/:nodeId/controls                     controllers.storage.EventController.addControl(mid: Int, nodeId: String)
GET           /museum/:mid/storagenodes/:nodeId/controls                     controllers.storage.EventController.listControls(mid: Int, nodeId: String)
GET           /museum/:mid/storagenodes/:nodeId/controls/:eventId            controllers.storage.EventController.getControl(mid: Int, nodeId: String, eventId: Long)

# Observations
POST          /museum/:mid/storagenodes/:nodeId/observations                 controllers.storage.EventController.addObservation(mid: Int, nodeId: String)
GET           /museum/:mid/storagenodes/:nodeId/observations                 controllers.storage.EventController.listObservations(mid: Int, nodeId: String)
GET           /museum/:mid/storagenodes/:nodeId/observations/:eventId        controllers.storage.EventController.getObservation(mid: Int, nodeId: String, eventId: Long)

# Object related endpoints
# TODO: These endpoints can now have a more intuitive URI that doesn't involve the "storagenodes" part of the URI.
GET           /museum/:mid/storagenodes/objects/:oid/locations               controllers.storage.StorageController.objectLocationHistory(mid: Int, oid: String, objectType: String ?= "collection", limit: Int ?= 50)
GET           /museum/:mid/storagenodes/objects/:oid/currentlocation         controllers.storage.StorageController.currentObjectLocation(mid: Int, oid: String, objectType: String ?= "collection")
POST          /museum/:mid/storagenodes/objects/currentlocations             controllers.storage.StorageController.currentObjectLocations(mid: Int)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# GeoLocation module
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GET           /address                                                       controllers.geolocation.GeoLocationController.searchExternal(search: Option[String] ?= None)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Analysis module
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AnalysisType endpoints
GET           /:mid/analyses/types                                           controllers.analysis.AnalysisController.getAnalysisTypes(mid: Int, categoryId: Option[Int], collectionIds: Option[String])
GET           /:mid/analyses/categories                                      controllers.analysis.AnalysisController.getAllAnalysisCategories(mid: Int)

# Analysis endpoints
POST          /:mid/analyses                                                 controllers.analysis.AnalysisController.saveAnalysisEvent(mid: Int)
GET           /:mid/analyses                                                 controllers.analysis.AnalysisController.getAnalysisEvents(mid: Int, collectionIds: String)
GET           /:mid/analyses/search                                          controllers.analysis.AnalysisController.search(mid: Int, collectionIds: String, q: Option[String], types: String ?= "", from: Int ?= 0, limit: Int ?=25)
GET           /:mid/analyses/:id                                             controllers.analysis.AnalysisController.getAnalysisById(mid: Int, id: Long)
PUT           /:mid/analyses/:id                                             controllers.analysis.AnalysisController.updateAnalysisEvent(mid: Int, id: Long)
GET           /:mid/analyses/:id/children                                    controllers.analysis.AnalysisController.getChildAnalyses(mid: Int, id: Long)
POST          /:mid/analyses/:id/results                                     controllers.analysis.AnalysisController.addResult(mid: Int, id: Long)
PUT           /:mid/analyses/:id/results                                     controllers.analysis.AnalysisController.updateResult(mid: Int, id: Long)
PUT           /:mid/analyses/:id/results/import                              controllers.analysis.AnalysisController.importResults(mid: Int, id: Long)

# Returns _all_ analysis module events, including SampleCreated.
GET           /:mid/analyses/objects/:id                                     controllers.analysis.AnalysisController.getAnalysisForObject(mid: Int, id: String)

# SampleObject endpoints
POST          /:mid/samples                                                  controllers.analysis.SampleObjectController.save(mid: Int)
GET           /:mid/samples                                                  controllers.analysis.SampleObjectController.getForMuseum(mid: Int)
PUT           /:mid/samples/:id                                              controllers.analysis.SampleObjectController.update(mid: Int, id: String)
GET           /:mid/samples/:id                                              controllers.analysis.SampleObjectController.getById(mid: Int, id: String)
DELETE        /:mid/samples/:id                                              controllers.analysis.SampleObjectController.delete(mid: Int, id: String)
GET           /:mid/samples/:parentId/children                               controllers.analysis.SampleObjectController.getForParentObject(mid: Int, parentId: String)
GET           /:mid/samples/:colObjId/all                                    controllers.analysis.SampleObjectController.getForOriginatingObject(mid: Int, colObjId: String)
GET           /:mid/node/:nodeId/samples                                     controllers.analysis.SampleObjectController.getSamplesForNode(mid: Int, nodeId: String, collectionIds: String)

# Misc...
GET           /treatments                                                    controllers.analysis.TreatmentController.getTreatmentList
GET           /storagecontainer                                              controllers.analysis.StorageContainerController.getStorageContainerList
GET           /sampletypes                                                   controllers.analysis.SampleTypeController.getSampleTypeList
GET           /storagemediums                                                controllers.analysis.StorageMediumController.getStorageMediumList
GET           /purposes                                                      controllers.analysis.PurposeController.listPurposes

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Loan module
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
POST          /:mid/loans                                                    controllers.loan.LoanController.createLoan(mid: Int)
GET           /:mid/loans/active                                             controllers.loan.LoanController.findActiveLoan(mid: Int)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Conservation module
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ConservationType endpoint

GET           /:mid/conservation/types                    controllers.conservation.ConservationController.getConservationTypes(mid: Int, collectionIds: Option[String])
GET           /:mid/conservation/materials                 controllers.conservation.ConservationController.getMaterialList(mid: Int, collectionId:String)
GET           /conservation/materials/:id                 controllers.conservation.ConservationController.getMaterial(id: Int, collectionId:String)
GET           /:mid/conservation/object/:id/materials          controllers.conservation.ConservationController.getCurrentMaterialDataForObject(mid: Int, id: String)
GET           /:mid/conservation/object/:id/measurements          controllers.conservation.ConservationController.getCurrentMeasurementDataForObject(mid: Int, id: String)

GET           /conservation/treatmentMaterials              controllers.conservation.ConservationController.getTreatmentMaterialList
GET           /conservation/treatmentKeywords               controllers.conservation.ConservationController.getKeywordList
GET           /conservation/roles                           controllers.conservation.ConservationController.getRoleList
GET           /conservation/conditionCodes                  controllers.conservation.ConservationController.getConditionCodeList

GET           /:mid/conservation/search                     controllers.conservation.ConservationController.search(mid: Int, collectionIds: String, q: Option[String], from: Int ?= 0, limit: Int ?=25)

# ConservationProcess endpoints
POST          /:mid/conservation/events                     controllers.conservation.ConservationModuleEventController.addEvent(mid: Int)
PUT           /:mid/conservation/events/:id                 controllers.conservation.ConservationModuleEventController.updateEvent(mid: Int, id: Long)
GET           /:mid/conservation/events/:id                 controllers.conservation.ConservationModuleEventController.getEventById(mid: Int, id: Long)

# Reports for Conservation module
GET           /:mid/conservation/conservationReport/:id     controllers.conservation.ConservationModuleEventController.getConservationReport(mid: Int, collectionId: String, id: Long)
GET           /:mid/conservation/conservationReportHTML/:id     controllers.conservation.ConservationModuleEventController.getConservationReportHTML(mid: Int, collectionId: String, id: Long)
# For testing calling service_document for report
#GET           /:mid/conservation/conservationReport/files/:fileId     controllers.conservation.DocumentMetadataController.getFilename(mid: Int, fileId: String)
GET           /:mid/conservation/conservationReport/attachments/:fileIds     controllers.conservation.DocumentMetadataController.getFilenames(mid: Int, fileIds: String)

# Returns _all_ conservation events
GET           /:mid/conservation/events/object/:id          controllers.conservation.ConservationModuleEventController.getEventsForObject(mid: Int, id: String)
GET           /:mid/conservation/conservations/object/:id   controllers.conservation.ConservationModuleEventController.getConservationWithKeyDataForObject(mid: Int, id: String)
DELETE        /:mid/conservation/events                     controllers.conservation.ConservationModuleEventController.deleteSubEvents(mid: Int, eventIds: String)

# --------------------------------------
# REST authorization endpoint meant for being called from the node-based backends
GET /authorize controllers.NodeAuthController.authorize(museumId: Option[Int], moduleConstraintId: Option[Int], permissions: Seq[Int])

