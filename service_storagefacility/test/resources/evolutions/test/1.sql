#
# TEST VERSION OF THE SCHEMA WITH relaxed PRIMARY AND FOREIGN KEY CONSTRAINTS
#
# STORAGE FACILITY SCHEMA
#
# --- !Ups

CREATE SCHEMA IF NOT EXISTS MUSARK_STORAGE;

-- ===========================================================================
-- Tables for storage nodes
-- ===========================================================================

CREATE TABLE MUSARK_STORAGE.STORAGE_NODE (
  storage_node_id   NUMBER(20) GENERATED BY DEFAULT AS IDENTITY,
  storage_node_uuid VARCHAR2(36),
  storage_node_name VARCHAR(512),
  area              NUMBER,
  area_to           NUMBER,
  is_storage_unit   VARCHAR(1)   DEFAULT '1',
  is_part_of        NUMBER(20),
  height            NUMBER,
  height_to         NUMBER,
  node_path         VARCHAR(1000)            NOT NULL,
  is_deleted        INTEGER DEFAULT 0        NOT NULL,
  storage_type      VARCHAR(100) DEFAULT 'StorageUnit',
  group_read        VARCHAR(4000),
  group_write       VARCHAR(4000),
  old_barcode       NUMBER(20),
  museum_id         INTEGER                  NOT NULL,
  updated_by        VARCHAR2(36)             NOT NULL,
  updated_date      TIMESTAMP                NOT NULL,
  PRIMARY KEY (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.ROOM (
  storage_node_id               NUMBER(20) NOT NULL,
  perimeter_security            INTEGER,
  theft_protection              INTEGER,
  fire_protection               INTEGER,
  water_damage_assessment       INTEGER,
  routines_and_contingency_plan INTEGER,
  relative_humidity             INTEGER,
  temperature_assessment        INTEGER,
  lighting_condition            INTEGER,
  preventive_conservation       INTEGER,
  PRIMARY KEY (storage_node_id),
  FOREIGN KEY (storage_node_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.BUILDING (
  storage_node_id NUMBER(20) NOT NULL,
  postal_address  VARCHAR(512),
  PRIMARY KEY (storage_node_id),
  FOREIGN KEY (storage_node_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.ORGANISATION (
  storage_node_id NUMBER(20) NOT NULL,
  postal_address  VARCHAR(512),
  PRIMARY KEY (storage_node_id),
  FOREIGN KEY (storage_node_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

-- ===========================================================================
-- The NEW event tables
-- ===========================================================================
CREATE TABLE MUSARK_STORAGE.NEW_EVENT (
  event_id        NUMBER(20) GENERATED BY DEFAULT AS IDENTITY,
  type_id         VARCHAR2(36) NOT NULL,
  museum_id       INTEGER,
  event_date      TIMESTAMP    NOT NULL,
  registered_by   VARCHAR2(36) NOT NULL,
  registered_date TIMESTAMP    NOT NULL,
  part_of         NUMBER(20),
  affected_uuid   VARCHAR2(36),
  affected_type   VARCHAR2(50), -- collection | sample | node | ...
  note            VARCHAR2(500),
  event_json      CLOB,
  PRIMARY KEY (event_id)
);

-- ===========================================================================
-- Event specific tables.
--
-- TODO: Remove once all events are migrated to new table structure!!!
-- ===========================================================================
CREATE TABLE MUSARK_STORAGE.ROLE (
  role_id   INTEGER GENERATED BY DEFAULT AS IDENTITY,
  name      VARCHAR2(100) NOT NULL,
  data_type VARCHAR2(100),
  PRIMARY KEY (role_id)
);

CREATE TABLE MUSARK_STORAGE.EVENT_TYPE (
  event_type_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
  name          VARCHAR(100) NOT NULL,
  PRIMARY KEY (event_type_id)
);

-- The main table for storing events in the StorageFacility service.
CREATE TABLE MUSARK_STORAGE.EVENT (
  event_id        NUMBER(20) GENERATED BY DEFAULT AS IDENTITY,
  event_type_id   INTEGER      NOT NULL, -- Move to separate table if we want to allow multiple instantiations
  note            VARCHAR2(500),
  event_date      TIMESTAMP    NOT NULL, -- When the event happened. Should be nullable.
  registered_by   VARCHAR2(36) NOT NULL,
  registered_date TIMESTAMP    NOT NULL, -- When the event was received by the system
  value_long      NUMBER(20), -- Custom value, events can choose to store some event-specific value here. NOTE: 20 is probably waaaaaay to much.
  value_string    VARCHAR2(250), -- Custom value, events can choose to store some event-specific value here.
  value_float     FLOAT, -- Custom value, events can choose to store some event-specific value here.
  part_of         NUMBER(20), -- 1 to 1 with a top-level event
  PRIMARY KEY (event_id),
  FOREIGN KEY (event_type_id) REFERENCES MUSARK_STORAGE.EVENT_TYPE (event_type_id),
  FOREIGN KEY (part_of) REFERENCES MUSARK_STORAGE.EVENT (event_id)
);

-- ???
CREATE TABLE MUSARK_STORAGE.EVENT_RELATION_EVENT (
  from_event_id NUMBER(20) NOT NULL,
  relation_id   INTEGER    NOT NULL,
  to_event_id   NUMBER(20) NOT NULL,
  FOREIGN KEY (from_event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id),
  FOREIGN KEY (to_event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id)
);

CREATE TABLE MUSARK_STORAGE.LOCAL_OBJECT (
  object_id           NUMBER(20) NOT NULL,
  latest_move_id      NUMBER(20) NOT NULL,
  current_location_id NUMBER(20) NOT NULL,
  museum_id           INTEGER    NOT NULL,
  object_type         VARCHAR(50) DEFAULT 'collection', -- possible values can be 'collection', or 'sample'
  PRIMARY KEY (object_id),
  FOREIGN KEY (current_location_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

CREATE TABLE MUSARK_STORAGE.EVENT_ROLE_ACTOR (
  event_id   NUMBER(20)   NOT NULL,
  role_id    INTEGER      NOT NULL,
  actor_uuid VARCHAR2(36) NOT NULL, -- reference by Id to the ActorService
  PRIMARY KEY (event_id, role_id, actor_uuid),
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id),
  FOREIGN KEY (role_id) REFERENCES MUSARK_STORAGE.ROLE (role_id)
);

CREATE TABLE MUSARK_STORAGE.EVENT_ROLE_OBJECT (
  event_id      NUMBER(20) NOT NULL,
  role_id       INTEGER    NOT NULL,
  object_id     NUMBER(20) NOT NULL,
  event_type_id NUMBER(20) NOT NULL,
  PRIMARY KEY (event_id, role_id, object_id),
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id),
  FOREIGN KEY (role_id) REFERENCES MUSARK_STORAGE.ROLE (role_id),
  FOREIGN KEY (object_id) REFERENCES MUSARK_STORAGE.LOCAL_OBJECT (object_id)
);

-- This is the generic event-to-place relation, the place of where an event
-- happened, the place of where something was moved to etc.
CREATE TABLE MUSARK_STORAGE.EVENT_ROLE_PLACE (
  event_id      NUMBER(20) NOT NULL,
  role_id       INTEGER    NOT NULL,
  place_id      NUMBER(20) NOT NULL,
  event_type_id NUMBER(20) NOT NULL,
  PRIMARY KEY (event_id, role_id, place_id),
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id),
  FOREIGN KEY (role_id) REFERENCES MUSARK_STORAGE.ROLE (role_id),
  FOREIGN KEY (place_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

-- For some event types, the "objects" really are places. Read it as
-- Event_Role_PlaceAsObject. This situation is stored in this table. We could
-- have used the EVENT_ROLE_OBJECT, but then we would loose foreign keys and
-- would have needed to tag which is which.
CREATE TABLE MUSARK_STORAGE.EVENT_ROLE_PLACE_AS_OBJECT (
  event_id      NUMBER(20) NOT NULL,
  role_id       INTEGER    NOT NULL,
  place_id      NUMBER(20) NOT NULL,
  event_type_id NUMBER(20) NOT NULL,
  PRIMARY KEY (event_id, role_id, place_id),
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id),
  FOREIGN KEY (role_id) REFERENCES MUSARK_STORAGE.ROLE (role_id),
  FOREIGN KEY (place_id) REFERENCES MUSARK_STORAGE.STORAGE_NODE (storage_node_id)
);

-- ===========================================================================
-- Tables for Events with additional attributes. These do not fit into the
-- three columns set aside for the custom attributes in the EVENT table.
-- ===========================================================================

-- Contains data for Events that have a FROM -> TO structure.
CREATE TABLE MUSARK_STORAGE.OBSERVATION_FROM_TO (
  event_id   NUMBER(20) NOT NULL,
  value_from NUMBER,
  value_to   NUMBER,
  PRIMARY KEY (event_id),
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id)
);

-- Contains extra data for storing environment requirement.
CREATE TABLE MUSARK_STORAGE.E_ENVIRONMENT_REQUIREMENT (
  event_id          NUMBER(20) NOT NULL,
  temperature       NUMBER,
  temp_tolerance    INTEGER,
  rel_humidity      NUMBER,
  rel_hum_tolerance INTEGER,
  hypoxic_air       NUMBER,
  hyp_air_tolerance INTEGER,
  cleaning          VARCHAR2(250),
  light             VARCHAR2(250),
  PRIMARY KEY (event_id),
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id)
);

-- Contains extra data for storing info about a pest lifecycle. It is used by
-- the ObservationPest event which can have many of these.
CREATE TABLE MUSARK_STORAGE.OBSERVATION_PEST_LIFECYCLE (
  event_id NUMBER(20) NOT NULL,
  stage    VARCHAR2(250),
  quantity INTEGER,
  FOREIGN KEY (event_id) REFERENCES MUSARK_STORAGE.EVENT (event_id)
);

-- ===========================================================================
-- Pre-populating necessary data
-- ===========================================================================
-- TopLevel event types
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (1, 'MoveObject');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (2, 'MovePlace');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (3, 'EnvRequirement');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (4, 'Control');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (5, 'Observation');

-- Control sub-event types
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (6, 'ControlAlcohol');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (7, 'ControlCleaning');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (8, 'ControlGas');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (9, 'ControlHypoxicAir');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (10, 'ControlLightingCondition');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (11, 'ControlMold');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (12, 'ControlPest');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (13, 'ControlRelativeHumidity');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (14, 'ControlTemperature');

-- Observation sub-event types
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (15, 'ObservationAlcohol');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (16, 'ObservationCleaning');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (17, 'ObservationFireProtection');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (18, 'ObservationGas');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (19, 'ObservationHypoxicAir');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (20, 'ObservationLightingCondition');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (21, 'ObservationMold');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (22, 'ObservationPerimeterSecurity');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (23, 'ObservationRelativeHumidity');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (24, 'ObservationPest');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (25, 'ObservationTemperature');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (26, 'ObservationTheftProtection');
INSERT INTO MUSARK_STORAGE.EVENT_TYPE (event_type_id, name) VALUES (27, 'ObservationWaterDamageAssessment');

-- Inserting roles
INSERT INTO MUSARK_STORAGE.ROLE (role_id, name, data_type) VALUES (1, 'DoneWith', 'object');
INSERT INTO MUSARK_STORAGE.ROLE (role_id, name, data_type) VALUES (2, 'DoneBy', 'actor');
INSERT INTO MUSARK_STORAGE.ROLE (role_id, name, data_type) VALUES (3, 'toPlace', 'storageNode');
INSERT INTO MUSARK_STORAGE.ROLE (role_id, name, data_type) VALUES (4, 'fromPlace', 'storageNode');

-- Inserting nodes
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('dca44956-40d0-48dc-bd0d-921b825ad019', 'Utviklingsmuseet', '1', NULL, 'Root', ',1,', 99, '896125d3-0563-46b6-a7c5-51f3f899ff0a', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('b56b654a-6de3-442f-97af-ca6d806cc5a6', 'Utenfor museet', '1', NULL, 'RootLoan', ',2,', 99, '896125d3-0563-46b6-a7c5-51f3f899ff0a', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('d3982b48-56c7-4d27-bc81-6e38b59d57ed', 'Utviklingsmuseet Org', '1', 1, 'Organisation', ',1,3,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('3562e09e-6cf4-4b27-acad-e655e771c016', 'Forskningens hus', '1', 3, 'Building', ',1,3,4,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('01134afe-b262-434b-a71f-8f697bc75e56', 'Kulturværelset', '1', 4, 'Room', ',1,3,4,5,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('244f09a3-eb1a-49e7-80ee-7a07baa016dd', 'Naturværelset', '1', 5, 'Room', ',1,3,4,6,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_UUID, STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE) VALUES ('6e5b9810-9bbf-464a-a0b9-c27f6095ba0c', 'Forskningsværelset', '1', 6, 'Room', ',1,3,4,7,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', TO_DATE('2016-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));

-- nodes without UUID
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 1', '1', 4, 'Room', ',1,3,4,8,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111111);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 2', '1', 4, 'Room', ',1,3,4,9,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111112);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 3', '1', 4, 'Room', ',1,3,4,10,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111113);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 4', '1', 4, 'Room', ',1,3,4,11,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111114);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 5', '1', 4, 'Room', ',1,3,4,12,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111115);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 6', '1', 4, 'Room', ',1,3,4,13,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111116);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 7', '1', 4, 'Room', ',1,3,4,14,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111117);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 8', '1', 4, 'Room', ',1,3,4,15,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111118);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 9', '1', 4, 'Room', ',1,3,4,16,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111119);
INSERT INTO MUSARK_STORAGE.STORAGE_NODE (STORAGE_NODE_NAME, IS_STORAGE_UNIT, IS_PART_OF, STORAGE_TYPE, NODE_PATH, MUSEUM_ID, UPDATED_BY, UPDATED_DATE, OLD_BARCODE) VALUES ('No UUID 10', '1', 4, 'Room', ',1,3,4,17,', 99, 'd63ab290-2fab-42d2-9b57-2475dfbd0b3c', '2016-01-01 00:00:00', 11111110);

-- Specific node details
INSERT INTO MUSARK_STORAGE.ORGANISATION VALUES (3, 'Foo Bar Street 1');
INSERT INTO MUSARK_STORAGE.BUILDING VALUES (4, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (6, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (7, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (9, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (10, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (11, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (12, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (13, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (14, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (15, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (16, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO MUSARK_STORAGE.ROOM VALUES (17, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

-- Inserting objects
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (1, 9999, 5, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (2, 9999, 5, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (3, 9999, 5, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (4, 9999, 5, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (5, 9999, 6, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (6, 9999, 6, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (7, 9999, 6, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (8, 9999, 6, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (9, 9999, 6, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (10, 9999, 7, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (11, 9999, 7, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (12, 9999, 7, 99);
INSERT INTO MUSARK_STORAGE.LOCAL_OBJECT (OBJECT_ID, LATEST_MOVE_ID, CURRENT_LOCATION_ID, MUSEUM_ID) VALUES (13, 9999, 7, 99);

# --- !Downs
