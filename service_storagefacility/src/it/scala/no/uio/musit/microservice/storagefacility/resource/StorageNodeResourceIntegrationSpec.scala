package no.uio.musit.microservice.storagefacility.resource

import no.uio.musit.microservice.storagefacility.domain.{MuseumId, NamedPathElement, NodePath}
import no.uio.musit.microservice.storagefacility.domain.storage.StorageType._
import no.uio.musit.microservice.storagefacility.domain.storage._
import no.uio.musit.formatters.DateTimeFormatters.dateTimeFormatter
import no.uio.musit.microservice.storagefacility.test.StorageNodeJsonGenerator._
import no.uio.musit.microservice.storagefacility.test._
import no.uio.musit.test.MusitSpecWithServerPerSuite
import org.joda.time.DateTime
import org.scalatest.time.{Millis, Seconds, Span}
import play.api.http.Status
import play.api.libs.json._
import play.api.libs.ws.WSResponse

/**
 * TODO: These tests are still somewhat fragile in that some of them
 * depend on ID's generated by the previously executed test cases.
 */
class StorageNodeResourceIntegrationSpec extends MusitSpecWithServerPerSuite {

  implicit override val patienceConfig: PatienceConfig = PatienceConfig(
    timeout = Span(15, Seconds),
    interval = Span(50, Millis)
  )

  def verifyNode[T <: StorageNode](
    response: WSResponse,
    expStorageType: StorageType,
    expName: String,
    expId: Long,
    expPartOf: Option[Long] = None
  )(implicit manifest: Manifest[T]): T = {
    val storageNode = parseAndVerifyResponse[T](response)
    // verifying common attributes across all storage node types
    storageNode.id mustBe Some(StorageNodeId(expId))
    storageNode.storageType mustBe expStorageType
    storageNode.isPartOf mustBe expPartOf.map(StorageNodeId.apply)
    storageNode.name mustBe expName
    storageNode mustBe a[T]

    storageNode
  }

  def parseAndVerifyResponse[T](response: WSResponse): T = {
    val json = Json.parse(response.body)
    val parsed = json.validate[StorageNode]
    parsed.isSuccess mustBe true
    parsed.get.asInstanceOf[T]
  }

  "Running the storage facility service" when {

    "interacting with the StorageUnitResource endpoints" should {

      "successfully create a few root nodes" in {

        def genAndAddRootNode(mid: Int, numNodes: Int, from: Int = 1): Seq[Root] = {
          val addedNodes = Seq.newBuilder[Root]
          for (i <- from until numNodes + from) {
            val res = wsUrl(RootNodeUrl(mid)).post(JsNull).futureValue
            val root = parseAndVerifyResponse[Root](res)
            root mustBe a[Root]
            root.id.isEmpty must not be true
            root.id.get mustBe StorageNodeId(i.toLong)
            root.storageType mustBe StorageType.RootType
            val rootId = root.id.get
            root.path mustBe NodePath(s",${rootId.underlying},")
            addedNodes += root
          }
          addedNodes.result()
        }

        genAndAddRootNode(2, 2).size mustBe 2
        genAndAddRootNode(3, 2, 3).size mustBe 2

      }

      "successfully create an organisation node" in {
        val mid = MuseumId(2)
        val json = organisationJson("My Org1", Some(StorageNodeId(1)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newOrg = parseAndVerifyResponse[Organisation](response)

        val organisation = verifyNode[Organisation](
          response, OrganisationType, "My Org1", newOrg.id.get, Some(1)
        )
        organisation mustBe an[Organisation]
        organisation.path mustBe NodePath(",1,5,")
      }

      "successfully create a building node" in {
        val mid = MuseumId(2)
        val json = buildingJson("My Building1", StorageNodeId(5))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newBuilding = parseAndVerifyResponse[Building](response)
        val building = verifyNode[Building](
          response, BuildingType, "My Building1", newBuilding.id.get, Some(5)
        )
        building mustBe a[Building]
        building.path mustBe NodePath(",1,5,6,")
      }

      "successfully create a room node" in {
        val mid = MuseumId(2)
        val json = roomJson("My Room1", Some(StorageNodeId(6)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newRoom = parseAndVerifyResponse[Room](response)
        val room = verifyNode[Room](
          response, RoomType, "My Room1", newRoom.id.get, Some(6)
        )
        room mustBe a[Room]
        room.path mustBe NodePath(",1,5,6,7,")
      }

      "successfully create a storage unit node" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("My Shelf1", StorageNodeId(7))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newStorageNode = parseAndVerifyResponse[StorageUnit](response)
        val su = verifyNode[StorageUnit](
          response, StorageUnitType, "My Shelf1", newStorageNode.id.get, Some(7)
        )
        su mustBe a[StorageUnit]
        su.path mustBe NodePath(",1,5,6,7,8,")
      }

      "not allow creating a storage node with a name over 500 chars" in {
        val mid = MuseumId(2)
        val json = storageUnitJson(VeryLongString, StorageNodeId(7))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue

        response.status mustBe Status.BAD_REQUEST
      }

      "not allow creating a building with an address over 500 chars" in {
        val mid = MuseumId(2)
        val bjs = buildingJson("fail", StorageNodeId(3))
        val json = bjs.as[JsObject] ++ Json.obj("address" -> VeryLongString)

        val response = wsUrl(StorageNodesUrl(mid.underlying)).post(json).futureValue

        response.status mustBe Status.BAD_REQUEST
      }

      "successfully get an organisation" in {
        val mid = MuseumId(2)
        val response = wsUrl(StorageNodeUrl(mid, 5)).get().futureValue
        response.status mustBe Status.OK

        val organisation = verifyNode[Organisation](
          response, OrganisationType, "My Org1", 5, Some(1)
        )
        organisation mustBe an[Organisation]
      }

      "successfully get a building" in {
        val mid = MuseumId(2)
        val response = wsUrl(StorageNodeUrl(mid, 6)).get().futureValue
        response.status mustBe Status.OK

        val building = verifyNode[Building](
          response, BuildingType, "My Building1", 6, Some(5)
        )
        building mustBe a[Building]
      }

      "successfully get a room" in {
        val mid = MuseumId(2)
        val response = wsUrl(StorageNodeUrl(mid, 7)).get().futureValue
        response.status mustBe Status.OK

        val room = verifyNode[Room](
          response, RoomType, "My Room1", 7, Some(6)
        )
        room mustBe a[Room]
        room.environmentRequirement must not be None
        room.path mustBe NodePath(",1,5,6,7,")
        room.pathNames must not be None
        room.pathNames.value must contain allOf (
          NamedPathElement(StorageNodeId(1), "root-node"),
          NamedPathElement(StorageNodeId(5), "My Org1"),
          NamedPathElement(StorageNodeId(6), "My Building1"),
          NamedPathElement(StorageNodeId(7), "My Room1")
        )
      }

      "successfully get a storage unit" in {
        val mid = MuseumId(2)
        val response = wsUrl(StorageNodeUrl(mid, 8)).get().futureValue
        response.status mustBe Status.OK

        val su = verifyNode[StorageUnit](
          response, StorageUnitType, "My Shelf1", 8, Some(7)
        )
        su mustBe a[StorageUnit]
        su.environmentRequirement must not be None
      }

      "not find a storage node with an invalid Id" in {
        val mid = MuseumId(2)
        val response = wsUrl(StorageNodeUrl(mid, 9999)).get().futureValue
        response.status mustBe Status.NOT_FOUND
      }

      "successfully update a storage unit" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("My Shelf2", StorageNodeId(7))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val su = verifyNode[StorageUnit](
          response, StorageUnitType, "My Shelf2", 9, Some(7)
        )
        su mustBe a[StorageUnit]
        su.path mustBe NodePath(",1,5,6,7,9,")
        su.areaTo mustBe Some(.5)
        su.heightTo mustBe Some(.6)

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "name" -> "My Shelf2b",
            "areaTo" -> JsNumber(.8),
            "heightTo" -> JsNumber(.8)
          )
        }

        val updRes = wsUrl(StorageNodeUrl(mid, su.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.OK
        val updated = verifyNode[StorageUnit](
          updRes, StorageUnitType, "My Shelf2b", su.id.get, Some(7)
        )

        updated mustBe a[StorageUnit]
        updated.path mustBe NodePath(",1,5,6,7,9,")
        updated.areaTo mustBe Some(.8)
        updated.heightTo mustBe Some(.8)
      }

      "successfully update a room" in {
        val mid = MuseumId(2)
        val json = roomJson("My Room2", Some(StorageNodeId(6)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val room = verifyNode[Room](
          response, RoomType, "My Room2", 10, Some(6)
        )
        room mustBe a[Room]
        room.path mustBe NodePath(",1,5,6,10,")
        room.areaTo mustBe Some(21.0)
        room.heightTo mustBe Some(2.6)

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "name" -> "My Room2b",
            "lightingCondition" -> true
          )
        }

        val updRes = wsUrl(StorageNodeUrl(mid, room.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.OK
        val updated = verifyNode[Room](
          updRes, RoomType, "My Room2b", room.id.get, Some(6)
        )

        updated mustBe a[Room]
        updated.path mustBe NodePath(",1,5,6,10,")
        updated.environmentAssessment.lightingCondition mustBe Some(true)
        updated.pathNames must not be None
        updated.pathNames.value must contain allOf (
          NamedPathElement(StorageNodeId(1), "root-node"),
          NamedPathElement(StorageNodeId(5), "My Org1"),
          NamedPathElement(StorageNodeId(6), "My Building1"),
          NamedPathElement(StorageNodeId(10), "My Room2b")
        )
      }

      "successfully update a building with environment requirements" in {
        val mid = MuseumId(2)
        val json = buildingJson("My Building2", StorageNodeId(5))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val building = verifyNode[Building](
          response, BuildingType, "My Building2", 11, Some(5)
        )
        building mustBe a[Building]
        building.path mustBe NodePath(",1,5,11,")
        building.areaTo mustBe Some(210.0)
        building.heightTo mustBe Some(3.5)

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "address" -> "Fjære Åker Øya 21, 2341 Huttiheita, Norge",
            "environmentRequirement" -> Json.parse(envReqJson("Filthy"))
          )
        }

        val updRes = wsUrl(StorageNodeUrl(mid, building.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.OK
        val updated = verifyNode[Building](
          updRes, BuildingType, "My Building2", building.id.get, Some(5)
        )

        updated mustBe a[Building]
        updated.path mustBe NodePath(",1,5,11,")
        updated.address mustBe Some("Fjære Åker Øya 21, 2341 Huttiheita, Norge")
        updated.environmentRequirement.isEmpty must not be true
        updated.environmentRequirement.get.cleaning mustBe Some("Filthy")
      }

      "successfully update an organisation" in {
        val mid = MuseumId(2)
        val json = organisationJson("My Organisation2", Some(StorageNodeId(1)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val organisation = verifyNode[Organisation](
          response, OrganisationType, "My Organisation2", 12, Some(1)
        )
        organisation mustBe an[Organisation]
        organisation.path mustBe NodePath(",1,12,")
        organisation.areaTo mustBe Some(2100)
        organisation.heightTo mustBe Some(3.5)

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "address" -> "Fjære Åker Øya 21, 2341 Huttiheita, Norge"
          )
        }

        val updRes = wsUrl(StorageNodeUrl(mid, organisation.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.OK
        val updated = verifyNode[Organisation](
          updRes, OrganisationType, "My Organisation2", organisation.id.get, organisation.isPartOf
        )

        updated mustBe an[Organisation]
        updated.path mustBe NodePath(",1,12,")
        updated.address mustBe Some("Fjære Åker Øya 21, 2341 Huttiheita, Norge")
      }

      "respond with 404 when trying to update a node that doesn't exist" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("Non existent", StorageNodeId(3))

        val failedUpdate = wsUrl(StorageNodeUrl(mid, 999)).put(json).futureValue
        failedUpdate.status mustBe Status.NOT_FOUND
      }

      "list all children for a node with correct storage types" in {
        val mid = MuseumId(2)
        val res = wsUrl(NodeChildrenUrl(mid, 1)).get().futureValue

        res.status mustBe Status.OK
        res.json.as[JsArray].value.foreach { jsv =>
          (jsv \ "type").as[String] mustBe "Organisation"
        }

      }

      "successfully delete a storage node" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("Remove me", StorageNodeId(7))
        val res = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        val created = verifyNode[StorageUnit](
          res, StorageUnitType, "Remove me", 13, Some(7)
        )

        created mustBe a[StorageUnit]

        val rmRes = wsUrl(StorageNodeUrl(mid, created.id.get)).delete().futureValue
        rmRes.status mustBe Status.OK

        val notFound = wsUrl(StorageNodeUrl(mid, created.id.get)).get().futureValue
        notFound.status mustBe Status.NOT_FOUND
      }

      "respond with 404 when deleting a node that doesn't exist" in {
        val mid = MuseumId(2)
        val rmRes = wsUrl(StorageNodeUrl(mid, 9999)).delete().futureValue
        rmRes.status mustBe Status.NOT_FOUND
      }

      "respond with 404 when deleting a node that is already deleted" in {
        val mid = MuseumId(2)
        val rmRes = wsUrl(StorageNodeUrl(mid, 13)).delete().futureValue
        rmRes.status mustBe Status.NOT_FOUND
      }

      "respond with 404 when updating a node that is deleted" in {
        val mid = MuseumId(2)
        val json = {
          storageUnitJson("Remove me", StorageNodeId(7)).as[JsObject] ++ Json.obj(
            "id" -> 13,
            "name" -> "Hakuna Matata"
          )
        }

        val failedUpdate = wsUrl(StorageNodeUrl(mid, 13)).put(json).futureValue
        failedUpdate.status mustBe Status.NOT_FOUND
      }

      "successfully move a single node" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("Move me", StorageNodeId(7))
        val res = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        val created = verifyNode[StorageUnit](
          res, StorageUnitType, "Move me", 14, Some(7)
        )

        created mustBe a[StorageUnit]
        created.path mustBe NodePath(",1,5,6,7,14,")

        val moveMeId = created.id.get.underlying

        val moveJson = Json.parse(
          s"""{
             |  "doneBy": 1,
             |  "destination": 9,
             |  "items": [${created.id.get.underlying}]
             |}""".stripMargin
        )

        val moveRes = wsUrl(MoveStorageNodeUrl(mid)).put(moveJson).futureValue
        moveRes.status mustBe Status.OK

        (moveRes.json \ "moved").as[JsArray].value.head.as[Long] mustBe moveMeId

        val movedNodeRes = wsUrl(StorageNodeUrl(mid, moveMeId)).get().futureValue
        val moved = verifyNode[StorageUnit](
          movedNodeRes, StorageUnitType, "Move me", moveMeId, Some(9)
        )
        moved mustBe a[StorageUnit]
        moved.path mustBe NodePath(",1,5,6,7,9,14,")

      }

      "successfully move several nodes" in {
        val mid = MuseumId(2)
        val json1 = storageUnitJson("Move me1", StorageNodeId(7))
        val res1 = wsUrl(StorageNodesUrl(mid)).post(json1).futureValue
        val json2 = storageUnitJson("Move me2", StorageNodeId(7))
        val res2 = wsUrl(StorageNodesUrl(mid)).post(json2).futureValue
        val json3 = storageUnitJson("Move me3", StorageNodeId(7))
        val res3 = wsUrl(StorageNodesUrl(mid)).post(json3).futureValue

        res1.status mustBe Status.CREATED
        res2.status mustBe Status.CREATED
        res3.status mustBe Status.CREATED

        val id1 = (res1.json \ "id").as[Long]
        val id2 = (res2.json \ "id").as[Long]
        val id3 = (res3.json \ "id").as[Long]

        val moveJson = Json.parse(
          s"""{
              |  "doneBy": 1,
              |  "destination": 9,
              |  "items": [$id1, $id2, $id3]
              |}""".stripMargin
        )

        val move = wsUrl(MoveStorageNodeUrl(mid)).put(moveJson).futureValue
        move.status mustBe Status.OK

        val movedRes1 = wsUrl(StorageNodeUrl(mid, id1)).get().futureValue
        val movedRes2 = wsUrl(StorageNodeUrl(mid, id2)).get().futureValue
        val movedRes3 = wsUrl(StorageNodeUrl(mid, id3)).get().futureValue

        val n1 = verifyNode[StorageUnit](
          movedRes1, StorageUnitType, "Move me1", id1, Some(9)
        )
        val n2 = verifyNode[StorageUnit](
          movedRes2, StorageUnitType, "Move me2", id2, Some(9)
        )
        val n3 = verifyNode[StorageUnit](
          movedRes3, StorageUnitType, "Move me3", id3, Some(9)
        )

        n1.path mustBe NodePath(s",1,5,6,7,9,$id1,")
        n2.path mustBe NodePath(s",1,5,6,7,9,$id2,")
        n3.path mustBe NodePath(s",1,5,6,7,9,$id3,")

      }

      "successfully move a node and all its children" in {
        val mid = MuseumId(2)
        // We know now that StorageNodeId 5 should have lots of children. Fetch!
        val res1 = wsUrl(NodeChildrenUrl(mid, 5)).get().futureValue
        res1.status mustBe Status.OK
        val directChildIds = res1.json.as[JsArray].value.map { jsv =>
          (jsv \ "id").as[Long]
        }

        val subChildrenIds = directChildIds.flatMap { id =>
          val r = wsUrl(NodeChildrenUrl(mid, id)).get().futureValue
          r.status mustBe Status.OK
          r.json.as[JsArray].value.map { jsv =>
            (jsv \ "id").as[Long]
          }
        }

        val verifyIds = directChildIds ++ subChildrenIds

        val moveJson = Json.parse(
          s"""{
              |  "doneBy": 1,
              |  "destination": 2,
              |  "items": [5]
              |}""".stripMargin
        )

        val moveRes = wsUrl(MoveStorageNodeUrl(mid)).put(moveJson).futureValue
        moveRes.status mustBe Status.OK
        (moveRes.json \ "moved").as[JsArray].value.map(_.as[Int]) must contain(5)

        val paths = verifyIds.map { id =>
          val r = wsUrl(StorageNodeUrl(mid, id)).get().futureValue
          r.status mustBe Status.OK
          (
            (r.json \ "id").as[Int],
            (r.json \ "path").as[String],
            (r.json \ "isPartOf").asOpt[Int]
          )
        }
      }

      "successfully move several objects" in {
        val mid = MuseumId(2)
        val id1 = 1234
        val id2 = 5678
        val id3 = 9876

        val moveJson = Json.parse(
          s"""{
              |  "doneBy": 1,
              |  "destination": 9,
              |  "items": [$id1, $id2, $id3]
              |}""".stripMargin
        )

        val move = wsUrl(MoveObjectUrl(mid)).put(moveJson).futureValue

        move.status mustBe Status.OK

        (move.json \ "moved").as[JsArray].value.map(_.as[Int]) must contain allOf (id1, id2, id3)
      }

      "successfully fetch the location history for a given node" in {
        val res = wsUrl(LocationHistoryUrl(2, 5)).get().futureValue
        res.status mustBe Status.OK
        val resArr = res.json.as[JsArray].value
        resArr must not be empty
        val firstElem = resArr.head

        val today = DateTime.now.withTimeAtStartOfDay()

        (firstElem \ "doneDate").as[DateTime] mustBe today
        (firstElem \ "doneBy").as[Int] mustBe 1
        (firstElem \ "registeredDate").as[DateTime].withTimeAtStartOfDay() mustBe today
        (firstElem \ "registeredBy").as[String] mustBe "Darth Vader"
        (firstElem \ "from" \ "path").as[NodePath] mustBe NodePath(",2,5,")
        (firstElem \ "from" \ "pathNames").as[JsArray].value must not be empty
        (firstElem \ "to" \ "path").as[NodePath] mustBe NodePath(",2,")
        (firstElem \ "to" \ "pathNames").as[JsArray].value must not be empty

      }

      "respond with 404(should be 403 ??) when trying to get an organisation with wrong museum" in {
        val mid = MuseumId(5)
        val json = storageUnitJson("Non existent museum", StorageNodeId(5))
        val failedUpdate = wsUrl(StorageNodeUrl(mid, 5)).put(json).futureValue
        failedUpdate.status mustBe Status.NOT_FOUND
      }

      "respond with 400 when trying to get an building with a museum that not exist" in {
        val mid = MuseumId(55)
        val json = storageUnitJson("Non existent museum", StorageNodeId(6))

        val failedUpdate = wsUrl(StorageNodeUrl(mid, 6)).put(json).futureValue
        failedUpdate.status mustBe Status.BAD_REQUEST
      }

      "Not list all children for a rootnode with museumId that not exist" in {
        val mid = MuseumId(55)
        val res = wsUrl(NodeChildrenUrl(mid, 1)).get().futureValue
        res.status mustBe Status.BAD_REQUEST
      }

      "Not list all children for a rootnode with wrong museumId " in {
        val mid = MuseumId(3)
        val res = wsUrl(NodeChildrenUrl(mid, 1)).get().futureValue

        res.status mustBe Status.OK
        res.json.as[JsArray].value.size mustBe 0
      }
      "UnSuccessfully get an organisation node with MuseumId that not exists" in {
        val mid = MuseumId(2)
        val json = organisationJson("My Org1", Some(StorageNodeId(1)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newOrg = parseAndVerifyResponse[Organisation](response)

        val organisation = verifyNode[Organisation](
          response, OrganisationType, "My Org1", newOrg.id.get, Some(1)
        )
        organisation mustBe an[Organisation]
        organisation.path mustBe NodePath(",1,18,")
        val notExistsMid = MuseumId(44)
        val notExistsRes = wsUrl(StorageNodeUrl(notExistsMid, newOrg.id.get)).get.futureValue
        notExistsRes.status mustBe Status.BAD_REQUEST
        val wrongMid = MuseumId(4)
        val wrongRes = wsUrl(StorageNodeUrl(wrongMid, newOrg.id.get)).get.futureValue
        wrongRes.status mustBe Status.NOT_FOUND
        // have to fill in later when auth-object is implemented.
      }

      "UnSuccessfully get a building node with MuseumId that not exists" in {
        val mid = MuseumId(2)
        val json = buildingJson("My Building1", StorageNodeId(5))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newBuilding = parseAndVerifyResponse[Building](response)
        val building = verifyNode[Building](
          response, BuildingType, "My Building1", newBuilding.id.get, Some(5)
        )
        building mustBe a[Building]
        building.path mustBe NodePath(",2,5,19,")
        val notExistsMid = MuseumId(44)
        val notExistsRes = wsUrl(StorageNodeUrl(notExistsMid, newBuilding.id.get)).get.futureValue
        notExistsRes.status mustBe Status.BAD_REQUEST
        val wrongMid = MuseumId(4)
        val wrongRes = wsUrl(StorageNodeUrl(wrongMid, newBuilding.id.get)).get.futureValue
        wrongRes.status mustBe Status.NOT_FOUND
        // have to fill in later when auth-object is implemented.
      }

      "UnSuccessfully get a room node with MuseumId that not exists" in {
        val mid = MuseumId(2)
        val json = roomJson("My Room1", Some(StorageNodeId(6)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newRoom = parseAndVerifyResponse[Room](response)
        val room = verifyNode[Room](
          response, RoomType, "My Room1", newRoom.id.get, Some(6)
        )
        room mustBe a[Room]
        room.path mustBe NodePath(",2,5,6,20,")
        val notExistsMid = MuseumId(44)
        val notExistsRes = wsUrl(StorageNodeUrl(notExistsMid, newRoom.id.get)).get.futureValue
        notExistsRes.status mustBe Status.BAD_REQUEST
        val wrongMid = MuseumId(4)
        val wrongRes = wsUrl(StorageNodeUrl(wrongMid, newRoom.id.get)).get.futureValue
        wrongRes.status mustBe Status.NOT_FOUND
        // have to fill in later when auth-object is implemented.
      }

      "UnSuccessfully get a storage unit node with MuseumId that not exists" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("My Shelf1", StorageNodeId(7))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val newStorageNode = parseAndVerifyResponse[StorageUnit](response)
        val su = verifyNode[StorageUnit](
          response, StorageUnitType, "My Shelf1", newStorageNode.id.get, Some(7)
        )
        su mustBe a[StorageUnit]
        su.path mustBe NodePath(",2,5,6,7,21,")
        val notExistsMid = MuseumId(44)
        val notExistsRes = wsUrl(StorageNodeUrl(notExistsMid, newStorageNode.id.get)).get.futureValue
        notExistsRes.status mustBe Status.BAD_REQUEST
        val wrongMid = MuseumId(4)
        val wrongRes = wsUrl(StorageNodeUrl(wrongMid, newStorageNode.id.get)).get.futureValue
        wrongRes.status mustBe Status.NOT_FOUND
        // have to fill in later when auth-object is implemented.
      }

      "UnSuccessfully update a storage unit with MuseumId that not exists or is not the right one" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("My Shelf2", StorageNodeId(7))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val su = verifyNode[StorageUnit](
          response, StorageUnitType, "My Shelf2", 22, Some(7)
        )
        su mustBe a[StorageUnit]
        su.path mustBe NodePath(",2,5,6,7,22,")
        su.areaTo mustBe Some(.5)
        su.heightTo mustBe Some(.6)

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "name" -> "My Shelf2b",
            "areaTo" -> JsNumber(.8),
            "heightTo" -> JsNumber(.8)
          )
        }
        val wrongMid = MuseumId(4)
        val updRes = wsUrl(StorageNodeUrl(wrongMid, su.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.NOT_FOUND
        val NotExistsMid = MuseumId(55)
        val notExistsupdRes = wsUrl(StorageNodeUrl(NotExistsMid, su.id.get)).put(updatedJson).futureValue
        notExistsupdRes.status mustBe Status.BAD_REQUEST

        val checkOldRes = wsUrl(StorageNodeUrl(mid, su.id.get)).get.futureValue
        val oldDataRes = verifyNode[StorageUnit](
          checkOldRes, StorageUnitType, "My Shelf2", su.id.get, Some(7)
        )
        oldDataRes mustBe a[StorageUnit]
        oldDataRes.path mustBe NodePath(",2,5,6,7,22,")
        oldDataRes.areaTo mustBe Some(.5)
        oldDataRes.heightTo mustBe Some(.6)
      }

      "UnSuccessfully update a room with MuseumId that not exists or is not the right one" in {
        val mid = MuseumId(2)
        val json = roomJson("My Room2", Some(StorageNodeId(6)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val room = verifyNode[Room](
          response, RoomType, "My Room2", 23, Some(6)
        )
        room mustBe a[Room]
        room.path mustBe NodePath(",2,5,6,23,")
        room.areaTo mustBe Some(21.0)
        room.heightTo mustBe Some(2.6)

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "name" -> "My Room2b",
            "lightingCondition" -> false,
            "waterDamage" -> true
          )
        }
        val wrongMid = MuseumId(4)
        val updRes = wsUrl(StorageNodeUrl(wrongMid, room.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.NOT_FOUND
        val NotExistsMid = MuseumId(55)
        val notExistsupdRes = wsUrl(StorageNodeUrl(NotExistsMid, room.id.get)).put(updatedJson).futureValue
        notExistsupdRes.status mustBe Status.BAD_REQUEST

        val checkOldRes = wsUrl(StorageNodeUrl(mid, room.id.get)).get.futureValue
        val oldDataRes = verifyNode[Room](
          checkOldRes, RoomType, "My Room2", room.id.get, Some(6)
        )
        oldDataRes mustBe a[Room]
        oldDataRes.path mustBe NodePath(",2,5,6,23,")
        oldDataRes.environmentAssessment.lightingCondition mustBe Some(true)
        oldDataRes.securityAssessment.waterDamage mustBe Some(false)
      }

      "UnSuccessfully update a building with environment requirements and MuseumId that not exists or is wrong" in {
        val mid = MuseumId(2)
        val json = buildingJson("My Building2", StorageNodeId(5))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val building = verifyNode[Building](
          response, BuildingType, "My Building2", 24, Some(5)
        )
        building mustBe a[Building]
        building.path mustBe NodePath(",2,5,24,")
        building.areaTo mustBe Some(210.0)
        building.heightTo mustBe Some(3.5)
        building.address.get must include("Foo gate 13")

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "address" -> "Fjære Åker Norge",
            "environmentRequirement" -> Json.parse(envReqJson("Filthy"))
          )
        }
        val wrongMid = MuseumId(4)
        val updRes = wsUrl(StorageNodeUrl(wrongMid, building.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.NOT_FOUND
        val NotExistsMid = MuseumId(55)
        val notExistsupdRes = wsUrl(StorageNodeUrl(NotExistsMid, building.id.get)).put(updatedJson).futureValue
        notExistsupdRes.status mustBe Status.BAD_REQUEST

        val checkOldRes = wsUrl(StorageNodeUrl(mid, building.id.get)).get.futureValue
        val oldDataRes = verifyNode[Building](
          checkOldRes, BuildingType, "My Building2", building.id.get, Some(5)
        )
        oldDataRes mustBe a[Building]
        oldDataRes.path mustBe NodePath(",2,5,24,")
        oldDataRes.address.get must include("Foo")
        oldDataRes.environmentRequirement.isEmpty must not be true
        oldDataRes.environmentRequirement.get.cleaning mustBe Some("Keep it clean!")
      }

      "UnSuccessfully update an organisation with MuseumId that not exists or is wrong" in {
        val mid = MuseumId(2)
        val json = organisationJson("My Organisation2", Some(StorageNodeId(1)))
        val response = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        response.status mustBe Status.CREATED
        val organisation = verifyNode[Organisation](
          response, OrganisationType, "My Organisation2", 25, Some(1)
        )
        organisation mustBe an[Organisation]
        organisation.path mustBe NodePath(",1,25,")
        organisation.areaTo mustBe Some(2100)
        organisation.heightTo mustBe Some(3.5)
        organisation.address.get must include("Foo gate 13")

        val updatedJson = {
          Json.parse(response.body).as[JsObject] ++ Json.obj(
            "address" -> "Fjære xxxx Huttiheita, Norge"
          )
        }
        val wrongMid = MuseumId(4)
        val updRes = wsUrl(StorageNodeUrl(wrongMid, organisation.id.get)).put(updatedJson).futureValue
        updRes.status mustBe Status.NOT_FOUND

        val NotExistsMid = MuseumId(55)
        val notExistsupdRes = wsUrl(StorageNodeUrl(NotExistsMid, organisation.id.get)).put(updatedJson).futureValue
        notExistsupdRes.status mustBe Status.BAD_REQUEST

        val checkOldRes = wsUrl(StorageNodeUrl(mid, organisation.id.get)).get.futureValue
        val oldDataRes = verifyNode[Organisation](
          checkOldRes, OrganisationType, "My Organisation2", organisation.id.get, Some(1)
        )
        oldDataRes mustBe an[Organisation]
        oldDataRes.path mustBe NodePath(",1,25,")
        oldDataRes.address.get must include("Foo gate 13")
      }

      "respond with 404 when trying to update a node that doesn't exist and with wrong MuseumId" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("Non existent", StorageNodeId(3))

        val failedUpdate = wsUrl(StorageNodeUrl(mid, 999)).put(json).futureValue
        failedUpdate.status mustBe Status.NOT_FOUND

        val wrongMid = MuseumId(55)
        val failedUpdate1 = wsUrl(StorageNodeUrl(wrongMid, 999)).put(json).futureValue
        failedUpdate1.status mustBe Status.BAD_REQUEST
      }

      "Unsuccessfully list all children for a node with correct storage types but with wrong museumId" in {
        val mid = MuseumId(2)
        val res = wsUrl(NodeChildrenUrl(mid, 1)).get().futureValue
        res.status mustBe Status.OK
        res.json.as[JsArray].value.nonEmpty mustBe true
        res.json.as[JsArray].value.foreach { jsv =>
          (jsv \ "type").as[String] mustBe "Organisation"
        }
        val anotherMid = MuseumId(6)
        val res1 = wsUrl(NodeChildrenUrl(anotherMid, 1)).get().futureValue
        res1.status mustBe Status.OK
        res1.json.as[JsArray].value.isEmpty mustBe true

      }

      "Unsuccessfully delete a storage node with wrong museumId " in {
        val mid = MuseumId(2)
        val json = storageUnitJson("Remove me", StorageNodeId(7))
        val res = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        val created = verifyNode[StorageUnit](
          res, StorageUnitType, "Remove me", 26, Some(7)
        )

        created mustBe a[StorageUnit]
        val wrongMid = MuseumId(4)
        val rmRes = wsUrl(StorageNodeUrl(wrongMid, created.id.get)).delete().futureValue
        rmRes.status mustBe Status.NOT_FOUND

        val stillThere = wsUrl(StorageNodeUrl(mid, created.id.get)).get().futureValue
        stillThere.status mustBe Status.OK
      }

      "respond with 400 when deleting a node that doesn't exist and with museumId that not exists" in {
        val notExistsMmid = MuseumId(55)
        val rmRes = wsUrl(StorageNodeUrl(notExistsMmid, 9999)).delete().futureValue
        rmRes.status mustBe Status.BAD_REQUEST
      }

      "respond with 404 when trying to delete a node that is already deleted with wrong MuseumId" in {
        val mid = MuseumId(2)
        val rmRes = wsUrl(StorageNodeUrl(mid, 26)).delete().futureValue
        rmRes.status mustBe Status.OK

        val wrongMid = MuseumId(4)
        val rmRes1 = wsUrl(StorageNodeUrl(wrongMid, 26)).delete().futureValue
        rmRes1.status mustBe Status.NOT_FOUND
      }

      "respond with 404 when updating a node that is deleted and with wrong museumId" in {
        val mid = MuseumId(4)
        val json = {
          storageUnitJson("Remove me", StorageNodeId(7)).as[JsObject] ++ Json.obj(
            "id" -> 26,
            "name" -> "Hakuna Matata"
          )
        }

        val failedUpdate = wsUrl(StorageNodeUrl(mid, 26)).put(json).futureValue
        failedUpdate.status mustBe Status.NOT_FOUND
        val getDeleted = wsUrl(StorageNodeUrl(2, 26)).get().futureValue
        getDeleted.status mustBe Status.NOT_FOUND
      }

      "UnSuccessfully move a single node with wrong museumId" in {
        val mid = MuseumId(2)
        val json = storageUnitJson("Move me", StorageNodeId(7))
        val res = wsUrl(StorageNodesUrl(mid)).post(json).futureValue
        val created = verifyNode[StorageUnit](
          res, StorageUnitType, "Move me", 27, Some(7)
        )

        created mustBe a[StorageUnit]
        created.path mustBe NodePath(",2,5,6,7,27,")

        val moveMeId = created.id.get.underlying

        val moveJson = Json.parse(
          s"""{
             |  "doneBy": 1,
             |  "destination": 9,
             |  "items": [${created.id.get.underlying}]
             |}""".stripMargin
        )
        val wrongMid = MuseumId(4)
        val moveRes = wsUrl(MoveStorageNodeUrl(wrongMid)).put(moveJson).futureValue

        moveRes.status mustBe Status.BAD_REQUEST
        println(Json.prettyPrint(moveRes.json))
        // (moveRes.json \ "failed").as[JsArray].value.head.as[Long] mustBe moveMeId
        moveRes.json.toString() must include("Nothing was moved")
        val movedNodeRes = wsUrl(StorageNodeUrl(mid, moveMeId)).get().futureValue

        val moved = verifyNode[StorageUnit](
          movedNodeRes, StorageUnitType, "Move me", moveMeId, Some(7)
        )
        moved mustBe a[StorageUnit]
        moved.path mustBe NodePath(",2,5,6,7,27,")

      }
      "successfully and unsuccessfully move several nodes with different museumId" in {
        val mid = MuseumId(2)
        val json1 = storageUnitJson("Move me1", StorageNodeId(7))
        val res1 = wsUrl(StorageNodesUrl(mid)).post(json1).futureValue
        val json2 = storageUnitJson("Move me2", StorageNodeId(7))
        val res2 = wsUrl(StorageNodesUrl(mid)).post(json2).futureValue
        val anotherMid = MuseumId(4)
        val json3 = storageUnitJson("Move me3", StorageNodeId(7))
        val res3 = wsUrl(StorageNodesUrl(anotherMid)).post(json3).futureValue

        res1.status mustBe Status.CREATED
        res2.status mustBe Status.CREATED
        res3.status mustBe Status.CREATED

        val id1 = (res1.json \ "id").as[Long]
        val id2 = (res2.json \ "id").as[Long]
        val id3 = (res3.json \ "id").as[Long]

        val moveJson = Json.parse(
          s"""{
              |  "doneBy": 1,
              |  "destination": 9,
              |  "items": [$id1, $id2, $id3]
              |}""".stripMargin
        )

        val move = wsUrl(MoveStorageNodeUrl(mid)).put(moveJson).futureValue
        move.status mustBe Status.OK

        println(Json.prettyPrint(move.json))
        (move.json \ "moved").as[JsArray].value.head.as[Long] mustBe id1
        (move.json \ "failed").as[JsArray].value.head.as[Long] mustBe id3
        val movedRes1 = wsUrl(StorageNodeUrl(mid, id1)).get().futureValue
        val movedRes2 = wsUrl(StorageNodeUrl(mid, id2)).get().futureValue
        val movedRes3 = wsUrl(StorageNodeUrl(anotherMid, id3)).get().futureValue

        val n1 = verifyNode[StorageUnit](
          movedRes1, StorageUnitType, "Move me1", id1, Some(9)
        )
        val n2 = verifyNode[StorageUnit](
          movedRes2, StorageUnitType, "Move me2", id2, Some(9)
        )
        val n3 = verifyNode[StorageUnit](
          movedRes3, StorageUnitType, "Move me3", id3, Some(7)
        )

        n1.path mustBe NodePath(s",2,5,6,7,9,$id1,")
        n2.path mustBe NodePath(s",2,5,6,7,9,$id2,")
        n3.path mustBe NodePath(s",2,5,6,7,$id3,")

      }
      /* "successfully and UnSuccesfully move several objects with different MuseumId " in {
     TODO: This test is pending until we can insert object with different museumId
        val mid = 2
        val id1 = 1234
        val id2 = 5678
        val id3 = 9876

        val moveJson = Json.parse(
          s"""{
              |  "doneBy": 1,
              |  "destination": 9,
              |  "items": [$id1, $id2, $id3]
              |}""".stripMargin
        )

        val move = wsUrl(MoveObjectUrl(mid)).put(moveJson).futureValue

        move.status mustBe Status.OK
        println(Json.prettyPrint(move.json))

        (move.json \ "moved").as[JsArray].value.map(_.as[Int]) must contain allOf (id1, id2, id3)
      }*/
    }
  }
}
